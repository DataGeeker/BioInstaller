# Configuration file of install.softwares(Github)
title = "Github Configuration File"
[bwa]
github_url = "https://github.com/lh3/bwa"

version_newest = "v0.7.15"

version_available = ["0.5.10", "0.5.9", "0.6.0", "0.6.1", "0.6.2", "0.7.0", "0.7.1", "0.7.10", "0.7.11", "0.7.12", "0.7.2", "0.7.3", "0.7.3a", "0.7.5", "0.7.5a", "0.7.6a", "0.7.7", "0.7.8", "0.7.9", "0.7.9a", "altgt-final", "bwa-0.5.9", "bwapi-final", "color-final", "final-chain-short", "narrow-band-final", "shortchain-final", "single-start", "v0.7.13", "v0.7.15"]

after_failure = "echo 'fail!'"

after_success = ["echo 'successful!'"]

make_dir = ["./"]

bin_dir = ["{{destdir}}/bin"]

[bwa.install]
linux = "make && mkdir -p {{destdir}}/bin; cp {{download.dir}}/bwa {{destdir}}/bin"
mac = "make && mkdir -p {{destdir}}/bin; cp {{download.dir}}/bwa {{destdir}}/bin"
windows = "make && md {{destdir}}\bin; cp {{download.dir}}\bwa {{destdir}}\bin"

[star]
github_url = "https://github.com/alexdobin/STAR"

version_newest = "2.5.3a"

supported.os = ["linux", "mac"]

version_available = ["2.5.3a", "2.5.0b", "2.5.0c", "2.5.1a", "2.5.1b", "2.5.2a", "2.5.2b", "STAR_2.3.1z12", "STAR_2.3.1z9", "STAR_2.4.0a", "STAR_2.4.0c", "STAR_2.4.0d", "STAR_2.4.0e", "STAR_2.4.0f1", "STAR_2.4.0g", "STAR_2.4.0g1", "STAR_2.4.0h", "STAR_2.4.0h1", "STAR_2.4.0i", "STAR_2.4.0j", "STAR_2.4.0k", "STAR_2.4.1a", "STAR_2.4.1b", "STAR_2.4.1c", "STAR_2.4.1d", "STAR_2.4.2a", "STAR_2.5.0a"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["source", "./"]

[star.bin_dir]
linux = "{{destdir}}/bin"
mac = "{{destdir}}/bin"

[star.install]
linux = "make && mkdir -p {{destdir}}/bin; cp {{download.dir}}/bin/Linux_x86_64/* {{destdir}}/bin"
mac = "make && mkdir -p {{destdir}}/bin; cp {{download.dir}}/bin/MacOSX_x86_64/* {{destdir}}/bin"
windows = "make && mkdir -p {{destdir}}/bin; cp {{download.dir}}/bin/Linux_x86_64/* {{destdir}}/bin"

[samtools_old]
github_url = "https://github.com/samtools/samtools"

version_newest = "0.1.9"

version_available = ["0.1.1", "0.1.10", "0.1.11", "0.1.12", "0.1.12a", "0.1.13", "0.1.14", "0.1.15", "0.1.16", "0.1.17", "0.1.18", "0.1.19", "0.1.2-svntag", "0.1.2-tarball", "0.1.20", "0.1.3", "0.1.4", "0.1.5", "0.1.5a", "0.1.5b", "0.1.5c", "0.1.6", "0.1.7", "0.1.7a", "0.1.8", "0.1.9"]

after_failure = "echo 'fail!'"

after_success = ""

make_dir = ["./"]

bin_dir = ["{{destdir}}/bin"]

[samtools_old.install]
linux = "make && mkdir -p {{destdir}}/bin; cp samtools {{destdir}}/bin/samtools_{{version}}"
mac = "make && mkdir -p {{destdir}}/bin; cp samtools {{destdir}}/bin/samtools_{{version}}"
windows = "make && mkdir -p {{destdir}}/bin; cp samtools {{destdir}}/bin/samtools_{{version}}"

[bcftools]
github_url = "https://github.com/samtools/bcftools"

version_newest = "1.4"

version_available = ["0.1.0", "0.2.0-rc1", "0.2.0-rc10", "0.2.0-rc11", "0.2.0-rc12", "0.2.0-rc2", "0.2.0-rc3", "0.2.0-rc4", "0.2.0-rc5", "0.2.0-rc6", "0.2.0-rc7", "0.2.0-rc8", "0.2.0-rc9", "1.0", "1.1", "1.2", "1.3", "1.3.1", "1.4"]

dependence = ["htslib"]

dependence_version = ["{{version}}"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{destdir}}/bin"]

[bcftools.install]
linux = "sed -i 's;HTSDIR = ../htslib;HTSDIR = {{htslib:source.dir}};' Makefile; make; mkdir -p {{destdir}}/bin; cp bcftools {{destdir}}/bin"
mac = "sed -i 's;HTSDIR = ../htslib;HTSDIR = {{htslib:source.dir}};' Makefile; make; mkdir -p {{destdir}}/bin; cp bcftools {{destdir}}/bin"
windows = "sed -i 's;HTSDIR = ../htslib;HTSDIR = {{htslib:source.dir}};' Makefile; make; mkdir -p {{destdir}}/bin; cp bcftools {{destdir}}/bin"

[bowtie]
github_url = "https://github.com/BenLangmead/bowtie"

version_newest = "v1.2.0"

version_available = ["v0.12.9", "v1.0.0", "v1.0.1", "v1.1.0", "v1.1.1", "v1.1.2", "v1.2.0"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{destdir}}/bin"]

[bowtie.install]
linux = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"
mac = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"
windows = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"

[bowtie2]
github_url = "https://github.com/BenLangmead/bowtie2"

version_newest = "v2.3.0"

version_available = ["TBB_pinned", "noIO_TBB_pinned", "rlb_v1", "rlb_v1a", "rlb_v1b", "v2.0.5", "v2.0.6", "v2.0.7", "v2.2.0", "v2.2.1", "v2.2.2", "v2.2.3", "v2.2.4", "v2.2.5", "v2.2.6", "v2.2.7", "v2.2.8", "v2.2.9", "v2.3.0"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{destdir}}/bin"]

[bowtie2.install]
linux = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"
mac = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"
windows = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"

[tophat2]
github_url = "https://github.com/infphilo/tophat"

version_newest = "v2.1.1"

version_available = ["v2.1.1", "v2.1.0"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{destdir}}/bin"]

[tophat2.install]
linux = "sh autogen.sh && ./configure --prefix={{destdir}} && make && make install"
mac = "sh autogen.sh && ./configure --prefix={{destdir}} && make && make install"
windows = "sh autogen.sh && ./configure --prefix={{destdir}} && make && make install"

[varscan2]
github_url = "https://github.com/Miachol/varscan"

version_newest = "v2.4.3"

version_available = ["v2.4.0", "v2.4.1", "v2.4.2", "v2.4.3"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{destdir}}/bin"]

[varscan2.install]
linux = "mkdir -p {{destdir}}/bin; cp `ls *.jar` {{destdir}}/bin"
mac = "mkdir -p {{destdir}}/bin; cp `ls *.jar` {{destdir}}/bin"
windows = "mkdir -p {{destdir}}/bin; cp `ls *.jar` {{destdir}}/bin"

[picard]
github_url = "https://github.com/broadinstitute/picard"

version_newest = "2.9.0"

version_available = ["1.03", "1.04", "1.05", "1.06", "1.07", "1.08", "1.09", "1.10", "1.100", "1.101", "1.102", "1.103", "1.104", "1.105", "1.106", "1.107", "1.108", "1.109", "1.11", "1.110", "1.113", "1.114", "1.115", "1.116", "1.117", "1.118", "1.119", "1.12", "1.120", "1.121", "1.122", "1.123", "1.124", "1.125", "1.126", "1.127", "1.128", "1.129", "1.13", "1.130", "1.131", "1.133", "1.134", "1.135", "1.136", "1.137", "1.138", "1.139", "1.14", "1.140", "1.141", "1.15", "1.16", "1.17", "1.18", "1.19", "1.21", "1.22", "1.23", "1.24", "1.25", "1.26", "1.27", "1.28", "1.29", "1.30", "1.31", "1.32", "1.33", "1.34", "1.35", "1.36", "1.37", "1.38", "1.39", "1.40", "1.41", "1.42", "1.43", "1.44", "1.45", "1.46", "1.47", "1.48", "1.49", "1.50", "1.51", "1.52", "1.53", "1.54", "1.55", "1.56", "1.57", "1.58", "1.59", "1.60", "1.61", "1.62", "1.63", "1.64", "1.65", "1.66", "1.67", "1.68", "1.69", "1.70", "1.71", "1.72", "1.73", "1.74", "1.75", "1.76", "1.77", "1.78", "1.79", "1.80", "1.81", "1.82", "1.83", "1.84", "1.85", "1.86", "1.87", "1.88", "1.89", "1.90", "1.91", "1.92", "1.93", "1.94", "1.95", "1.96", "1.97", "1.98", "1.99", "2.0.1", "2.1.0", "2.1.1", "2.2.0", "2.2.1", "2.2.2", "2.2.3", "2.2.4", "2.3.0", "2.3.0_buildhotfix", "2.4.0", "2.4.1", "2.5.0", "2.5.0-gradle", "2.6.0", "2.7.0", "2.7.1", "2.7.2", "2.8.0", "2.8.1", "2.8.2", "2.8.3", "2.9.0"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{destdir}}/bin"]

[picard.install]
linux = "{{download.dir}}/gradlew shadowJar && mkdir {{destdir}}/bin; cp {{download.dir}}/build/libs/* {{destdir}}/bin"
mac = "{{download.dir}}/gradlew shadowJar && mkdir {{destdir}}/bin; cp {{download.dir}}/build/libs/* {{destdir}}/bin"
windows = "{{download.dir}}/gradlew shadowJar && mkdir {{destdir}}/bin; cp {{download.dir}}/build/libs/* {{destdir}}/bin"

[vcftools]
github_url = "https://github.com/vcftools/vcftools"

version_newest = "v0.1.15"

version_available = ["v0.1.15","v0.1.14", "v0.1.13"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{destdir}}/bin"]

[vcftools.install]
linux = "./autogen.sh && ./configure --prefix={{destdir}} && make && make install"
mac = "./autogen.sh && ./configure --prefix={{destdir}} && make && make install"
windows = "./autogen.sh && ./configure --prefix={{destdir}} && make && make install"

[pindel]
github_url = "https://github.com/genome/pindel"

dependence = ["htslib"]

dependence_version = ["1.3.2"]

version_newest = "v0.2.5b8"

version_available = ["bcbio", "r0.2.4t", "ubuntu/lucid/0.2.4t-1", "ubuntu/lucid/0.2.4t-2", "ubuntu/lucid/0.2.4t-3", "upstream/0.2.4t", "v0.2.4t", "v0.2.5", "v0.2.5a7", "v0.2.5b1", "v0.2.5b4", "v0.2.5b5", "v0.2.5b6", "v0.2.5b8"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{destdir}}/bin"]

[pindel.install]
linux = "./INSTALL {{htslib:source.dir}}; mkdir {{destdir}}/bin; cp `ls -F {{download.dir}} |grep '*' | grep -v 'INSTALL'` {{destdir}}/bin"
mac = "./INSTALL {{htslib:source.dir}}; mkdir {{destdir}}/bin; cp `ls -F {{download.dir}} |grep '*' | grep -v 'INSTALL'` {{destdir}}/bin"
windows = "./INSTALL {{htslib:source.dir}}; mkdir {{destdir}}/bin; cp `ls -F {{download.dir}} |grep '*' | grep -v 'INSTALL'` {{destdir}}/bin"

[lofreq]
github_url = "https://github.com/Miachol/lofreq"

version_newest = "2.1.2"

version_available = ["2.1.2"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{destdir}}/bin/"]

[lofreq.install]
linux = "mkdir -p {{destdir}}/bin; bindir={{download.dir}}/lofreq_star-2.1.2_linux-x86-64/bin; files=`ls $bindir/*`; cd $bindir; chmod +x $files; cp $files {{destdir}}/bin"
mac = "mkdir -p {{destdir}}/bin; bindir={{download.dir}}/lofreq_star-2.1.2_linux-x86-64/bin; files=`ls $bindir/*`; cd $bindir; chmod +x $files; cp $files {{destdir}}/bin"
windows = "mkdir -p {{destdir}}/bin; bindir={{download.dir}}/lofreq_star-2.1.2_linux-x86-64/bin; files=`ls $bindir/*`; cd $bindir; chmod +x $files; cp $files {{destdir}}/bin"

[hisat2]
github_url = "https://github.com/infphilo/hisat2"

version_newest = "cba6e8cb"

version_available = ["cba6e8cb"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{download.dir}}"]

[hisat2.install]
linux = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"
mac = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"
windows = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"

[freebayes]
github_url = "https://github.com/ekg/freebayes"

use_git2r = false
recursive_clone = true

version_newest = "master"

version_available = ["v0.1.0", "v0.9.10", "v0.9.13", "v0.9.14", "v0.9.15", "v0.9.16", "v0.9.17", "v0.9.18", "v0.9.19", "v0.9.20", "v0.9.21", "v0.9.9.1", "v0.9.9.2", "v1.0.0", "v1.0.1", "v1.0.2", "v1.1.0", "v9.9.1", "v9.9.11", "v9.9.13", "v9.9.2", "master"]

after_failure = "echo 'fail'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{destdir}}/bin"]

[freebayes.install]
linux = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"
mac = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"
windows = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"

[macs]
github_url = "https://github.com/taoliu/MACS/"

version_newest = "2015.4.20"

version_available = ["1.4beta", "1.4rc2", "2.1.0.20140616", "2015.4.20", "initial_merging_by_Ben", "tag_at_May_31_2012", "v1.4.0", "v1.4.1", "v1.4.2", "v2", "v2.0.10_6_6_2012", "v2.0.2", "v2.0.3", "v2.0.4", "v2.0.5", "v2.0.6", "v2.0.7", "v2.0.8", "v2.0.9"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{download.dir}}/bin"]

[macs.before_install]
linux = "pip install cython"
mac = "pip install cython"
windows = "pip install cython"

[macs.install]
linux = "if [ -f setup_w_cython.py ]; then python setup_w_cython.py install; else python setup.py install ;fi"
mac = "if [ -f setup_w_cython.py ]; then python setup_w_cython.py install; else python setup.py install ;fi"
windows = "if [ -f setup_w_cython.py ]; then python setup_w_cython.py install; else python setup.py install ;fi"

[bedtools]
github_url = "https://github.com/arq5x/bedtools2"

version_newest = "v2.26.0"

version_available = ["v2.18.0", "v2.18.1", "v2.18.2", "v2.19.0", "v2.19.1", "v2.20.0", "v2.20.1", "v2.21.0", "v2.22.0", "v2.22.1", "v2.23.0", "v2.24.0", "v2.25.0", "v2.26.0"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{destdir}}/bin"]

[bedtools.install]
linux = "make && mkdir -p {{destdir}}/bin; cp {{download.dir}}/bin/* {{destdir}}/bin"
mac = "make && mkdir -p {{destdir}}/bin; cp {{download.dir}}/bin/* {{destdir}}/bin"
windows = "make && mkdir -p {{destdir}}/bin; cp {{download.dir}}/bin/* {{destdir}}/bin"

[sparsehash]
github_url = "https://github.com/sparsehash/sparsehash"

version_newest = "sparsehash-2.0.3"

version_available = ["-1.9", "sparsehash-0.1", "sparsehash-0.2", "sparsehash-0.3", "sparsehash-0.4", "sparsehash-0.5", "sparsehash-0.6", "sparsehash-0.8", "sparsehash-0.9", "sparsehash-0.9.1", "sparsehash-1.0", "sparsehash-1.0.1", "sparsehash-1.0.2", "sparsehash-1.1", "sparsehash-1.10", "sparsehash-1.11", "sparsehash-1.12", "sparsehash-1.2", "sparsehash-1.3", "sparsehash-1.4", "sparsehash-1.5", "sparsehash-1.5.1", "sparsehash-1.5.2", "sparsehash-1.6", "sparsehash-1.7", "sparsehash-1.8.1", "sparsehash-1.9", "sparsehash-2.0", "sparsehash-2.0.1", "sparsehash-2.0.2", "sparsehash-2.0.3"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{destdir}}/bin"]

[sparsehash.install]
linux = "sh autogen.sh && ./configure --prefix={{destdir}} && make && make install"
mac = "sh autogen.sh && ./configure --prefix={{destdir}} && make && make install"
windows = "sh autogen.sh && ./configure --prefix={{destdir}} && make && make install"

[abyss]
github_url = "https://github.com/bcgsc/abyss"

version_newest = "2.0.2"

version_available = ["1.0", "1.0.1", "1.0.10", "1.0.11", "1.0.12", "1.0.13", "1.0.14", "1.0.15", "1.0.16", "1.0.2", "1.0.3", "1.0.4", "1.0.5", "1.0.6", "1.0.7", "1.0.8", "1.0.9", "1.1.0", "1.1.1", "1.1.2", "1.2.0", "1.2.1", "1.2.2", "1.2.3", "1.2.4", "1.2.5", "1.2.6", "1.2.7", "1.3.0", "1.3.1", "1.3.2", "1.3.3", "1.3.4", "1.3.5", "1.3.6", "1.3.7", "1.5.0", "1.5.1", "1.5.2", "1.9.0", "2.0.0", "2.0.1", "2.0.2", "konnector-prelease", "konnector2-prerelease"]

dependence = ["sparsehash", "sqlite"]

dependence_version = ["sparsehash-2.0.3", "3170000"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{destdir}}/bin"]

[abyss.install]
linux = "sh autogen.sh && ./configure --enable-maxk=96 --prefix={{destdir}} --with-mpi --with-sqlite={{sqlite:install.dir}} CPPFLAGS=-I{{sparsehash:install.dir}}/include && make"
mac = "sh autogen.sh && ./configure --enable-maxk=96 --prefix={{destdir}} --with-mpi --with-sqlite={{sqlite:install.dir}} CPPFLAGS=-I{{sparsehash:install.dir}}/include && make"
windows = "sh autogen.sh && ./configure --enable-maxk=96 --prefix={{destdir}} --with-mpi --with-sqlite={{sqlite:install.dir}} CPPFLAGS=-I{{sparsehash:install.dir}}/include && make"

[bamtools]
github_url = "https://github.com/pezmaster31/bamtools"

version_newest = "v2.4.1"

version_available = ["v2.0.0", "v2.0.1", "v2.0.2", "v2.0.3", "v2.0.4", "v2.0.5", "v2.1.0", "v2.1.1", "v2.2.0", "v2.2.1", "v2.2.2", "v2.2.3", "v2.3.0", "v2.4.0", "v2.4.1"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{destdir}}/bin"]

[bamtools.before_install]
linux = "mkdir build; cd build && cmake .."
mac = "mkdir build; cd build && cmake .."
windows = "md build; cd build && cmake .."

[bamtools.install]
linux = "cd build && make ;mkdir -p {{destdir}}/bin; cp {{download.dir}}/bin/* {{destdir}}/bin"
mac = "cd build && make ;mkdir -p {{destdir}}/bin; cp {{download.dir}}/bin/* {{destdir}}/bin"
windows = "cd build && make ;mkdir -p {{destdir}}/bin; cp {{download.dir}}/bin/* {{destdir}}/bin"

[breakdancer]
github_url = "https://github.com/genome/breakdancer.git"
use_git2r = false

version_newest = "v1.4.5"

version_available = ["v1.0.0", "v1.0.1", "v1.0.2", "v1.1.0", "v1.1.1", "v1.2.0", "v1.2.1", "v1.2.2", "v1.2.3", "v1.2.4", "v1.2.5", "v1.2.6", "v1.2.7", "v1.2.7.1", "v1.2.8", "v1.2.8.1", "v1.2.8.2", "v1.2.8.3", "v1.3.0", "v1.3.1", "v1.3.1.1", "v1.3.2", "v1.3.3", "v1.3.3.1", "v1.3.3.2", "v1.3.3.3", "v1.3.4", "v1.3.5", "v1.3.5.1", "v1.3.6", "v1.3.7", "v1.4.0", "v1.4.1", "v1.4.2", "v1.4.3", "v1.4.4", "v1.4.5", "master"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{download.dir}}/build/bin"]

[breakdancer.before_install]
linux = ["mkdir build; cd build && cmake .. -DCMAKE_BUILD_TYPE=release -DCMAKE_INSTALL_PREFIX=/usr/local"]
mac = ["mkdir build; cd build && cmake .. -DCMAKE_BUILD_TYPE=release -DCMAKE_INSTALL_PREFIX=/usr/local"]
windows = ["mkdir build; cd build && cmake .. -DCMAKE_BUILD_TYPE=release -DCMAKE_INSTALL_PREFIX=/usr/local"]

[breakdancer.install]
linux = "cd build && make && make install"
mac = "cd build && make && make install"
windows = "cd build && make && make install"

[htseq]
github_url = "https://github.com/simon-anders/htseq"

version_newest = "release_0.7.2"

version_available = ["release_0.4.0", "release_0.4.1", "release_0.4.2-p3", "release_0.5.4", "release_0.6.1", "release_0.6.1p1", "release_0.7.0", "release_0.7.0py3", "release_0.7.1", "release_0.7.1py3", "release_0.7.2"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{download.dir}}/scripts"]

[htseq.before_install]
linux = ["pip install numpy", "pip install Cython", "pip install 'matplotlib>=1.4'"]
mac = ["pip install numpy", "pip install Cython", "pip install 'matplotlib>=1.4'"]
windows = ["pip install numpy", "pip install Cython", "pip install 'matplotlib>=1.4'"]

[htseq.install]
linux = "pip install ."
mac = "pip install ."
windows = "pip install ."

[seqtk]
github_url = "https://github.com/ndaniel/seqtk"

version_newest = "1.2-r101b"

version_available = ["1.0", "1.0-r68a", "1.0-r68b", "1.0-r68c", "1.0-r68d", "1.0-r68e", "1.0-r82b", "1.2-r101b", "seqtk-1.0-r68b", "seqtk-1.0-r86a", "sgdp"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{destdir}}/bin"]

[seqtk.install]
linux = "make && mkdir -p {{destdir}}/bin; cp {{download.dir}}/seqtk {{destdir}}/bin"
mac = "make && mkdir -p {{destdir}}/bin; cp {{download.dir}}/seqtk {{destdir}}/bin"
windows = "make && mkdir -p {{destdir}}/bin; cp {{download.dir}}/seqtk {{destdir}}/bin"

[delly]
github_url = "https://github.com/dellytools/delly.git"
use_git2r = false
recursive_clone = true

version_newest = "v0.7.7"

version_available = ["v0.1.2", "v0.1.3", "v0.2.1", "v0.2.2", "v0.3.1", "v0.3.2", "v0.3.3", "v0.5.3", "v0.5.4", "v0.5.5", "v0.5.6", "v0.5.8", "v0.5.9", "v0.6.1", "v0.6.2", "v0.6.3", "v0.6.5", "v0.6.6", "v0.6.7", "v0.6.8", "v0.7.1", "v0.7.2", "v0.7.3", "v0.7.5", "v0.7.6", "v0.7.7"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{destdir}}/bin"]

[delly.install]
linux = "make all; mkdir -p {{destdir}}/bin; fn=`ls -F src|grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cd src; cp $fn {{destdir}}/bin"
mac = "make all; mkdir -p {{destdir}}/bin; fn=`ls -F src|grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cd src; cp $fn {{destdir}}/bin"
windows = "make all; mkdir -p {{destdir}}/bin; fn=`ls -F src|grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cd src; cp $fn {{destdir}}/bin"

[tmap]
github_url = "git://github.com/iontorrent/TMAP.git"
use_git2r = false

version_newest = "3.4.0"

version_available = ["0.0.1", "0.0.10", "0.0.11", "0.0.12", "0.0.13", "0.0.14", "0.0.15", "0.0.16", "0.0.17", "0.0.18", "0.0.19", "0.0.2", "0.0.20", "0.0.21", "0.0.22", "0.0.23", "0.0.24", "0.0.25", "0.0.26", "0.0.27", "0.0.28", "0.0.29", "0.0.3", "0.0.30", "0.0.31", "0.0.4", "0.0.5", "0.0.6", "0.0.7", "0.0.8", "0.0.9", "0.1.1", "0.1.2", "0.1.3", "0.2.0", "0.2.1", "0.2.2", "0.2.3", "0.3.0", "0.3.1", "0.3.2", "0.3.3", "0.3.4", "0.3.5", "0.3.6", "0.3.7", "0.3.8", "0.3.9", "2.3.1", "2.3.2", "2.3.3", "2.3.4", "2.3.5", "2.3.6", "2.9.0", "2.9.1", "2.9.2", "3.0.0", "3.0.1", "3.2.0", "3.2.1", "3.4.0"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{destdir}}/bin"]

[tmap.before_install]
linux = ["git submodule init", " git submodule update"]
mac = ["git submodule init", " git submodule update"]
windows = ["git submodule init", " git submodule update"]

[tmap.install]
linux = ["git checkout -b {{version}} tmap.{{version}}", "git submodule update", 
         "sh autogen.sh && ./configure --prefix={{destdir}} && make", "make install"]
mac = ["git checkout -b {{version}} tmap.{{version}}", "git submodule update", 
         "sh autogen.sh && ./configure --prefix={{destdir}} && make", "make install"]
windows = ["git checkout -b {{version}} tmap.{{version}}", "git submodule update", 
         "sh autogen.sh && ./configure --prefix={{destdir}} && make", "make install"]

[somaticsniper]
github_url = "https://github.com/genome/somatic-sniper"

version_newest = "v1.0.5.0"

version_available = ["v0.1.0", "v0.7.4", "v0.7.4.1", "v0.7.4.2", "v0.7.4.3", "v0.7.4.4", "v0.7.4.5", "v0.7.4.6", "v0.7.4.7", "v0.7.4.8", "v0.7.4.9", "v1.0.0", "v1.0.0.1", "v1.0.0.2", "v1.0.1", "v1.0.2", "v1.0.2.1", "v1.0.2.2", "v1.0.2.3", "v1.0.3", "v1.0.4", "v1.0.4.1", "v1.0.4.2", "v1.0.5.0"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{destdir}}/bin"]

[somaticsniper.install]
linux = "mkdir build; cd build && cmake ../ && make deps && make -j && make test; mkdir -p {{destdir}}/bin; cp {{download.dir}}/build/bin/* {{destdir}}/bin"
mac = "mkdir build; cd build && cmake ../ && make deps && make -j && make test; mkdir -p {{destdir}}/bin; cp {{download.dir}}/build/bin/* {{destdir}}/bin"
windows = "mkdir build; cd build && cmake ../ && make deps && make -j && make test; mkdir -p {{destdir}}/bin; cp {{download.dir}}/build/bin/* {{destdir}}/bin"

[bamutil]
github_url = "https://github.com/statgen/bamUtil"

version_newest = "v1.0.14"

version_available = ["v1.0.0", "v1.0.10", "v1.0.11", "v1.0.12", "v1.0.13", "v1.0.14", "v1.0.2", "v1.0.3", "v1.0.5", "v1.0.6", "v1.0.7", "v1.0.9"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{destdir}}/bin"]

[bamutil.install]
linux = "make cloneLib && make && make install INSTALLDIR={{destdir}}"
mac = "make cloneLib && make && make install INSTALLDIR={{destdir}}"
windows = "make cloneLib && make && make install INSTALLDIR={{destdir}}"

[vcflib]
github_url = "https://github.com/vcflib/vcflib"
use_git2r = false
recursive_clone = true

version_newest = "v1.0.0-rc1"

version_available = ["v1.0.0-rc1", "v1.0.0-rc0"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{destdir}}/bin"]

[vcflib.install]
linux = "make && mkdir -p {{destdir}}/bin; fn=`ls -F bin|grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cd bin; cp $fn {{destdir}}/bin"
mac = "make && mkdir -p {{destdir}}/bin; fn=`ls -F bin|grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cd bin; cp $fn {{destdir}}/bin"
windows = "make && mkdir -p {{destdir}}/bin; fn=`ls -F bin|grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cd bin; cp $fn {{destdir}}/bin"

[jvarkit]
github_url = "https://github.com/lindenb/jvarkit/"

version_newest = "master"

version_available = ["master"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{download.dir}}/dist"]

[jvarkit.install]
linux = "make all"
mac = "make all"
windows = "make all"

[fastx_toolkit]
github_url = "https://github.com/agordon/fastx_toolkit"

dependence = ["libgtextutils"]

dependence_version = ["0.7"]

version_newest = "0.0.14"

version_available = ["0.0.14", "0.0.14-rc1", "0.0.14-rc1-no-tr1", "0.0.14-rc2"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{destdir}}/bin"]

[fastx_toolkit.install]
linux = "export PKG_CONFIG_PATH=PKG_CONFIG_PATH:{{libgtextutils:source.dir}}; ./reconf && ./configure --prefix={{destdir}} && make && make install"
mac = "export PKG_CONFIG_PATH=PKG_CONFIG_PATH:{{libgtextutils:source.dir}}; ./reconf && ./configure --prefix={{destdir}} && make && make install"
windows = "export PKG_CONFIG_PATH=PKG_CONFIG_PATH:{{libgtextutils:source.dir}}; ./reconf && ./configure --prefix={{destdir}} && make && make install"

[libgtextutils]
github_url = "https://github.com/agordon/libgtextutils"

version_newest = "0.7"

version_available = ["0.7", "0.0.7-rc1"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{destdir}}/lib"]

[libgtextutils.install]
linux = "./reconf && ./configure --prefix={{destdir}} && make && make install"
mac = "./reconf && ./configure --prefix={{destdir}} && make && make install"
windows = "./reconf && ./configure --prefix={{destdir}} && make && mak install"

[trinityrnaseq]
github_url = "https://github.com/trinityrnaseq/trinityrnaseq"

version_newest = "Trinity-v2.4.0"

version_available = ["Trinity-v2.3.1_PRERELEASE", "Trinity-v2.3.2", "Trinity-v2.4.0", "v2.0.2", "v2.0.3", "v2.0.4", "v2.0.5", "v2.0.6", "v2.1.0", "v2.1.1", "v2.2.0", "v2.3.0_PRERELEASE"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{destdir}}/bin"]

[trinityrnaseq.install]
linux = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"
mac = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"
windows = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"

[oases]
github_url = "https://github.com/dzerbino/oases"
use_git2r = false
recursive_clone = true

version_newest = "0.2.09"

version_available = ["0.2.09"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{destdir}}/bin"]

[oases.install]
linux = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"
mac = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"
windows = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"

[rum]
github_url = "https://github.com/itmat/rum"

version_newest = "v2.0.5_06"

version_available = ["v1.11.0", "v1.12_00", "v1.12_01", "v2.0.0_01", "v2.0.0_02", "v2.0.0_03", "v2.0.0_04", "v2.0.0_05", "v2.0.0_06", "v2.0.0_07", "v2.0.0_08", "v2.0.0_09", "v2.0.0_10", "v2.0.0_11", "v2.0.0_12", "v2.0.0_13", "v2.0.0_14", "v2.0.0_15", "v2.0.1", "v2.0.1_01", "v2.0.2", "v2.0.2_01", "v2.0.2_02", "v2.0.2_03", "v2.0.2_04", "v2.0.2_05", "v2.0.2_06", "v2.0.2_07", "v2.0.2_08", "v2.0.3", "v2.0.3_01", "v2.0.3_02", "v2.0.3_03", "v2.0.3_04", "v2.0.3_05", "v2.0.3_06", "v2.0.4", "v2.0.5_01", "v2.0.5_02", "v2.0.5_03", "v2.0.5_04", "v2.0.5_05", "v2.0.5_06"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{destdir}}/bin"]

[rum.install]
linux = ["cpan -i autodie", "cpan -i Log::Log4perl", "perl Makefile.PL INSTALL_BASE={{destdir}} && make", "make install"]
mac = ["cpan -i autodie", "cpan -i Log::Log4perl", "perl Makefile.PL INSTALL_BASE={{destdir}} && make", "make install"]
windows = ["cpan -i autodie", "cpan -i Log::Log4perl", "perl Makefile.PL INSTALL_BASE={{destdir}} && make", "make install"]

[igraph]
github_url = "https://github.com/igraph/igraph"

version_newest = "0.7.1"

version_available = ["0.5.8", "0.6.5", "0.6.6", "0.7.0", "0.7.1", "0.8.0-pre"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{destdir}}/lib"]

[igraph.install]
linux = "sh bootstrap.sh;./configure --prefix={{destdir}} && make && make install"
mac = "sh bootstrap.sh;./configure --prefix={{destdir}} && make && make install"
windows = "sh bootstrap.sh;./configure --prefix={{destdir}} && make && make install"

[pxz]
github_url = "https://github.com/jnovy/pxz"

version_newest = "master"

version_available = ["master"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{destdir}}/bin"]

[pxz.install]
linux = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"
mac = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"
windows = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"

[cnvkit]
github_url = "https://github.com/etal/cnvkit"

version_newest = "v0.8.5"

version_available = ["v0.2", "v0.2.1", "v0.2.2", "v0.2.3", "v0.2.4", "v0.2.5", "v0.3.0", "v0.3.1", "v0.3.2", "v0.3.3", "v0.3.4", "v0.3.5", "v0.4.0", "v0.4.1", "v0.5.0", "v0.5.1", "v0.5.2", "v0.6.0", "v0.6.1", "v0.7.0", "v0.7.1", "v0.7.10", "v0.7.11", "v0.7.2", "v0.7.3", "v0.7.4", "v0.7.5", "v0.7.6", "v0.7.7", "v0.7.8", "v0.7.9", "v0.8.0", "v0.8.1", "v0.8.2", "v0.8.3", "v0.8.4", "v0.8.5"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{download.dir}}"]

[cnvkit.install]
linux = "pip install ."
mac = "pip install ."
windows = "pip install ."

[speedseq]
github_url = "https://github.com/hall-lab/speedseq"
use_git2r = false
recursive_clone = true

dependence = ["root@6.03.04"]
dependence_version = ["6.03.04"]

version_newest = "master"

version_available = ["v0.0.2", "v0.0.3", "v0.0.3a", "v0.1.0", "v0.1.1", "v0.1.2", "master"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./"]

bin_dir = ["{{destdir}}/bin/speedseq"]

[speedseq.install]
linux = "source ~/.bashrc; make; mkdir {{destdir}}/bin/speedseq; fn=`ls -F bin|grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cd bin; cp $fn {{destdir}}/bin/speedseq"
mac = "source ~/.bashrc; make; mkdir {{destdir}}/bin/speedseq; fn=`ls -F bin|grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cd bin; cp $fn {{destdir}}/bin/speedseq"
windows = "source ~/.bashrc; make; mkdir {{destdir}}/bin/speedseq; fn=`ls -F bin|grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cd bin; cp $fn {{destdir}}/bin/speedseq"

[cnvnator]

github_url = "https://github.com/abyzovlab/CNVnator"

dependence = ["cnvnator_samtools", "root@6.03.04"]

dependence_version = ["1.3.1", "6.03.04"]

version_newest = "v0.3.3"

version_available = ["v0.3.3", "v0.3.2", "v0.3.1"]

after_failure = "echo 'fail!'"

after_success = "echo 'successful!'"

make_dir = ["./", "./src"]

bin_dir = ["{{destdir}}/bin"]

[cnvnator.install]

linux = "source ~/.bashrc; ln -s {{cnvnator_samtools:source.dir}} ./samtools; make; mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"
mac = "source ~/.bashrc; ln -s {{cnvnator_samtools:source.dir}} ./samtools; make; mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"
windows = "source ~/.bashrc; ln -s {{cnvnator_samtools:source.dir}} ./samtools; make; mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"
